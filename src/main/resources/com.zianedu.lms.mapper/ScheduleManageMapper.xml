<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zianedu.lms.mapper.ScheduleManageMapper">

    <select id="selectCalculateListAtYesterdayByPayDate" resultType="CalculateInfoDTO">
        SELECT
          TT.G_KEY, TT.TYPE, TT.PM_TYPE, TT.kind,
          SUM ( CALC_PRICE - ( CALC_PRICE * PAY_CHARGE ) ) as CALC_PRICE,
          COUNT (*) as J_COUNT, TT.calc_calculate_rate, TT.g_calculate_rate, TT.g_t_calculate_rate, TT.t_calculate_rate
        FROM
        (
            SELECT
                G_KEY,
                NAME,
                J_KEY,
                TYPE,
                KIND,
                PRICE,
                COUPON_DC_PRICE,
                (dc_welfare / j_g_count) as DC_WELFARE,
                (dc_point / j_g_count) as DC_POINT,
                CALC_CALCULATE_RATE,
                NVL( g_calculate_rate, 0 ) as G_CALCULATE_RATE,
                NVL( g_t_calculate_rate, 0 ) as G_T_CALCULATE_RATE,
                T_CALCULATE_RATE,
                J_G_COUNT,
                ( price - ( dc_welfare / j_g_count ) - ( dc_free / j_g_count ) ) * ( calc_calculate_rate / 100.0 ) - coupon_dc_price - ( dc_point / j_g_count ) as CALC_PRICE,
                PAY_CHARGE,
                PM_TYPE,
                PAY_STATUS
            FROM
                (
                    SELECT
                        A.G_KEY, C.NAME, A.J_KEY, A.TYPE,

                        CASE WHEN A.KIND >= 1
                        <![CDATA[
                            AND A.KIND <= 50 THEN 1 ELSE A.KIND END kind,
                         ]]>
                        (A.SELL_PRICE * A.cnt) PRICE,
                        NVL( A.coupon_dc_price, 0 ) coupon_dc_price,
                        B.dc_welfare, B.dc_point, B.dc_free,

                        CASE NVL( C.calculate_rate, 0 )
                        WHEN 0 THEN CASE A.TYPE
                        WHEN 1 THEN CASE NVL( E.onlinelec_calculate_rate, 0 ) WHEN 0 THEN 30 ELSE E.onlinelec_calculate_rate END
                        WHEN 2 THEN CASE NVL( E.offlinelec_calculate_rate, 0 ) WHEN 0 THEN 50 ELSE E.offlinelec_calculate_rate END
                        ELSE 0 END
                        ELSE C.calculate_rate * ( D.calculate_rate / 100 )
                        END as calc_calculate_rate,
                        C.calculate_rate g_calculate_rate,
                        D.calculate_rate as g_t_calculate_rate,
                        CASE A.TYPE
                        WHEN 1 THEN CASE NVL( E.onlinelec_calculate_rate, 0 ) WHEN 0 THEN 30 ELSE E.onlinelec_calculate_rate END
                        WHEN 2 THEN CASE NVL( E.offlinelec_calculate_rate, 0 ) WHEN 0 THEN 50 ELSE E.offlinelec_calculate_rate END
                        ELSE 0 END as t_calculate_rate,

                        (
                            SELECT COUNT(*) FROM T_ORDER_GOODS WHERE J_KEY = B.J_KEY AND ( TYPE = 1 or TYPE = 2 OR ( TYPE = 5 AND F.PM_TYPE = 1 OR F.PM_TYPE = 2  ) )
                        ) as J_G_COUNT,

                        CASE B.PAY_TYPE WHEN 0 THEN 0.038 WHEN 22 THEN 0.038 ELSE 0 END PAY_CHARGE,
                        0 as PM_TYPE,
                        B.PAY_STATUS

                    FROM T_ORDER_GOODS A
                    INNER JOIN T_ORDER B
                    ON A.J_KEY = B.J_KEY
                    INNER JOIN T_GOODS C
                    ON A.G_KEY = C.G_KEY
                    INNER JOIN T_GOODS_TEACHER_LINK D
                    ON A.G_KEY = D.G_KEY
                    INNER JOIN T_TEACHER E
                    ON D.TEACHER_KEY = E.TEACHER_KEY
                    LEFT JOIN T_ORDER_PROMOTION F
                    ON F.J_PM_KEY = A.J_PM_KEY
                    WHERE 1=1
                    AND TO_CHAR(B.PAY_DATE, 'YYYY-MM-DD') =  #{yesterday}
                    AND B.pay_date is not null
                    AND B.pay_type NOT IN (20)
                    AND (A.type = 1 OR A.type = 2)
                    AND A.J_PM_KEY = 0
                    <![CDATA[
                    AND A.EXTEND_DAY < 0
                     ]]>
                    AND A.SELL_PRICE > 0
                    AND E.teacher_key = #{teacherKey}

                    UNION ALL

                    SELECT
                        C.G_KEY, E.NAME, A.J_KEY, A.TYPE, A.KIND,

                        CASE B.PM_TYPE
                        WHEN 1 THEN A.SELL_PRICE / ( SELECT COUNT(J_G_KEY) FROM T_ORDER_GOODS WHERE J_PM_KEY = C.J_PM_KEY )
                        WHEN 2 THEN  (
                        F.SELL_PRICE * ( 1.0 * A.SELL_PRICE /
                                            (
                                            SELECT SUM (ZZ.SELL_PRICE)
                                            FROM T_ORDER_GOODS Z
                                            INNER JOIN T_GOODS_PRICE_OPTION ZZ
                                            on Z.PRICE_KEY = ZZ.PRICE_KEY
                                            WHERE Z.J_PM_KEY = C.J_PM_KEY
                                            )
                                        )
                                    )
                        ELSE C.SELL_PRICE END AS PRICE,

                        NVL( C.coupon_dc_price, 0 ) COUPON_DC_PRICE,
                        D.DC_WELFARE,
                        D.DC_POINT,
                        D.DC_FREE,

                        CASE C.TYPE
                        WHEN 1 THEN CASE NVL( I.onlinelec_calculate_rate, 0 ) WHEN 0 THEN 30 ELSE I.onlinelec_calculate_rate END
                        WHEN 2 THEN CASE NVL( I.offlinelec_calculate_rate, 0 ) WHEN 0 THEN 50 ELSE I.offlinelec_calculate_rate END
                        ELSE 0 END calc_calculate_rate,

                        E.calculate_rate g_calculate_rate,
                        G.calculate_rate g_t_calculate_rate,

                        CASE C.TYPE
                        WHEN 1 THEN CASE NVL( I.onlinelec_calculate_rate, 0 ) WHEN 0 THEN 30 ELSE I.onlinelec_calculate_rate END
                        WHEN 2 THEN CASE NVL( I.offlinelec_calculate_rate, 0 ) WHEN 0 THEN 50 ELSE I.offlinelec_calculate_rate END
                        ELSE 0 END t_calculate_rate,

                        (
                            SELECT COUNT(*) FROM T_ORDER_GOODS WHERE J_KEY = D.J_KEY AND ( TYPE = 1 or TYPE = 2 OR ( TYPE = 5 AND B.PM_TYPE = 1 OR B.PM_TYPE = 2  ) )
                        ) as J_G_COUNT,

                        CASE PAY_TYPE
                        WHEN 0 THEN 0.038
                        WHEN 22 THEN 0.038
                        ELSE 0 END pay_charge,

                        B.PM_TYPE,
                        D.PAY_STATUS
                    FROM T_ORDER_GOODS A
                    INNER JOIN T_ORDER_PROMOTION B
                    ON A.j_g_key = B.j_g_key
                    INNER JOIN T_ORDER_GOODS C
                    ON C.j_pm_key = B.j_pm_key
                    INNER JOIN T_ORDER D
                    ON C.j_key = D.j_key
                    INNER JOIN T_GOODS E
                    ON C.g_key = E.g_key
                    INNER JOIN T_GOODS_TEACHER_LINK G
                    ON C.g_key = G.g_key
                    INNER JOIN T_GOODS_PRICE_OPTION F
                    ON F.price_key = C.price_key
                    INNER JOIN T_USER H
                    ON H.USER_KEY = D.USER_KEY
                    INNER JOIN T_TEACHER I
                    ON G.teacher_key = I.teacher_key
                    WHERE 1=1
                    AND D.pay_date is not null
                    AND TO_CHAR(D.PAY_DATE, 'YYYY-MM-DD') = #{yesterday}
                    AND D.pay_status IN (2,8)
                    AND D.pay_type NOT IN (20)
                    AND (C.type = 1 OR C.type = 2)
                    AND (B.pm_type = 1 OR B.pm_type =2 )
                    AND C.j_pm_key > 0
                     <![CDATA[
                    AND C.extend_day < 0
                     ]]>
                    AND G.teacher_key = #{teacherKey}
                ) T
        ) TT
        WHERE calc_price > 0
        GROUP BY G_KEY, TYPE, KIND, calc_calculate_rate, g_calculate_rate, g_t_calculate_rate, t_calculate_rate, pm_type
        ORDER BY TYPE, KIND, G_KEY
    </select>

    <select id="selectCalculateListAtYesterdayByCancelDate" resultType="CalculateInfoDTO">
        SELECT
           TT.G_KEY, TT.TYPE, TT.PM_TYPE, TT.kind,
           SUM ( CALC_PRICE - ( CALC_PRICE * PAY_CHARGE ) ) as CALC_PRICE,
           COUNT (*) as J_COUNT, TT.calc_calculate_rate, TT.g_calculate_rate, TT.g_t_calculate_rate, TT.t_calculate_rate
        FROM
        (
            SELECT
                G_KEY,
                NAME,
                J_KEY,
                TYPE,
                KIND,
                PRICE,
                COUPON_DC_PRICE,
                (dc_welfare / j_g_count) as DC_WELFARE,
                (dc_point / j_g_count) as DC_POINT,
                CALC_CALCULATE_RATE,
                NVL( g_calculate_rate, 0 ) as G_CALCULATE_RATE,
                NVL( g_t_calculate_rate, 0 ) as G_T_CALCULATE_RATE,
                T_CALCULATE_RATE,
                J_G_COUNT,
                ( price - ( dc_welfare / j_g_count ) - ( dc_free / j_g_count ) ) * ( calc_calculate_rate / 100.0 ) - coupon_dc_price - ( dc_point / j_g_count ) as CALC_PRICE,
                PAY_CHARGE,
                PM_TYPE,
                PAY_STATUS
            FROM
            (
                SELECT
                A.G_KEY, C.NAME, A.J_KEY, A.TYPE,

                CASE WHEN A.KIND >= 1
                <![CDATA[
                  AND A.KIND <= 50 THEN 1 ELSE A.KIND END kind,
                ]]>
                (A.SELL_PRICE * A.cnt) PRICE,
                NVL( A.coupon_dc_price, 0 ) coupon_dc_price,
                B.dc_welfare, B.dc_point, B.dc_free,

                CASE NVL( C.calculate_rate, 0 )
                WHEN 0 THEN CASE A.TYPE
                WHEN 1 THEN CASE NVL( E.onlinelec_calculate_rate, 0 ) WHEN 0 THEN 30 ELSE E.onlinelec_calculate_rate END
                WHEN 2 THEN CASE NVL( E.offlinelec_calculate_rate, 0 ) WHEN 0 THEN 50 ELSE E.offlinelec_calculate_rate END
                ELSE 0 END
                ELSE C.calculate_rate * ( D.calculate_rate / 100 )
                END as calc_calculate_rate,
                C.calculate_rate g_calculate_rate,
                D.calculate_rate as g_t_calculate_rate,
                CASE A.TYPE
                WHEN 1 THEN CASE NVL( E.onlinelec_calculate_rate, 0 ) WHEN 0 THEN 30 ELSE E.onlinelec_calculate_rate END
                WHEN 2 THEN CASE NVL( E.offlinelec_calculate_rate, 0 ) WHEN 0 THEN 50 ELSE E.offlinelec_calculate_rate END
                ELSE 0 END as t_calculate_rate,

                (
                  SELECT COUNT(*) FROM T_ORDER_GOODS WHERE J_KEY = B.J_KEY AND ( TYPE = 1 or TYPE = 2 OR ( TYPE = 5 AND F.PM_TYPE = 1 OR F.PM_TYPE = 2  ) )
                ) as J_G_COUNT,

                CASE B.PAY_TYPE WHEN 0 THEN 0.038 WHEN 22 THEN 0.038 ELSE 0 END PAY_CHARGE,
                0 as PM_TYPE,
                B.PAY_STATUS

                FROM T_ORDER_GOODS A
                INNER JOIN T_ORDER B
                ON A.J_KEY = B.J_KEY
                INNER JOIN T_GOODS C
                ON A.G_KEY = C.G_KEY
                INNER JOIN T_GOODS_TEACHER_LINK D
                ON A.G_KEY = D.G_KEY
                INNER JOIN T_TEACHER E
                ON D.TEACHER_KEY = E.TEACHER_KEY
                LEFT JOIN T_ORDER_PROMOTION F
                ON F.J_PM_KEY = A.J_PM_KEY
                WHERE 1=1
                AND TO_CHAR(B.CANCEL_DATE, 'YYYY-MM-DD') = #{yesterday}
                AND B.pay_date is not null
                AND B.pay_type NOT IN (20)
                AND (A.type = 1 OR A.type = 2)
                AND A.J_PM_KEY = 0
                <![CDATA[
                AND A.EXTEND_DAY < 0
                 ]]>
                AND A.SELL_PRICE > 0
                AND E.teacher_key = #{teacherKey}

                UNION ALL

                SELECT
                A.G_KEY, E.NAME, A.J_KEY, A.TYPE, A.KIND,

                CASE B.PM_TYPE
                WHEN 1 THEN A.SELL_PRICE / ( SELECT COUNT(J_G_KEY) FROM T_ORDER_GOODS WHERE J_PM_KEY = C.J_PM_KEY )
                WHEN 2 THEN  (
                F.SELL_PRICE * ( 1.0 * A.SELL_PRICE /
                                    (
                                    SELECT SUM (ZZ.SELL_PRICE)
                                    FROM T_ORDER_GOODS Z
                                    INNER JOIN T_GOODS_PRICE_OPTION ZZ
                                    on Z.PRICE_KEY = ZZ.PRICE_KEY
                                    WHERE Z.J_PM_KEY = C.J_PM_KEY
                                    )
                                )
                              )
                ELSE C.SELL_PRICE END AS PRICE,

                NVL( C.coupon_dc_price, 0 ) COUPON_DC_PRICE,
                D.DC_WELFARE,
                D.DC_POINT,
                D.DC_FREE,

                CASE C.TYPE
                WHEN 1 THEN CASE NVL( I.onlinelec_calculate_rate, 0 ) WHEN 0 THEN 30 ELSE I.onlinelec_calculate_rate END
                WHEN 2 THEN CASE NVL( I.offlinelec_calculate_rate, 0 ) WHEN 0 THEN 50 ELSE I.offlinelec_calculate_rate END
                ELSE 0 END calc_calculate_rate,

                E.calculate_rate g_calculate_rate,
                G.calculate_rate g_t_calculate_rate,

                CASE C.TYPE
                WHEN 1 THEN CASE NVL( I.onlinelec_calculate_rate, 0 ) WHEN 0 THEN 30 ELSE I.onlinelec_calculate_rate END
                WHEN 2 THEN CASE NVL( I.offlinelec_calculate_rate, 0 ) WHEN 0 THEN 50 ELSE I.offlinelec_calculate_rate END
                ELSE 0 END t_calculate_rate,

                (
                    SELECT COUNT(*) FROM T_ORDER_GOODS WHERE J_KEY = D.J_KEY AND ( TYPE = 1 or TYPE = 2 OR ( TYPE = 5 AND B.PM_TYPE = 1 OR B.PM_TYPE = 2  ) )
                ) as J_G_COUNT,

                CASE PAY_TYPE
                WHEN 0 THEN 0.038
                WHEN 22 THEN 0.038
                ELSE 0 END pay_charge,

                B.PM_TYPE,
                D.PAY_STATUS
                FROM T_ORDER_GOODS A
                INNER JOIN T_ORDER_PROMOTION B
                ON A.j_g_key = B.j_g_key
                INNER JOIN T_ORDER_GOODS C
                ON C.j_pm_key = B.j_pm_key
                INNER JOIN T_ORDER D
                ON C.j_key = D.j_key
                INNER JOIN T_GOODS E
                ON C.g_key = E.g_key
                INNER JOIN T_GOODS_TEACHER_LINK G
                ON C.g_key = G.g_key
                INNER JOIN T_GOODS_PRICE_OPTION F
                ON F.price_key = C.price_key
                INNER JOIN T_USER H
                ON H.USER_KEY = D.USER_KEY
                INNER JOIN T_TEACHER I
                ON G.teacher_key = I.teacher_key
                WHERE 1=1
                AND D.pay_date is not null
                AND TO_CHAR(D.CANCEL_DATE, 'YYYY-MM-DD') = #{yesterday}
                AND D.pay_status IN (2,8)
                AND D.pay_type NOT IN (20)
                AND (C.type = 1 OR C.type = 2)
                AND (B.pm_type = 1 OR B.pm_type =2 )
                AND C.j_pm_key > 0
                <![CDATA[
                        AND C.extend_day < 0
                         ]]>
                AND G.teacher_key = #{teacherKey}
              ) T
        ) TT
        WHERE calc_price > 0
        GROUP BY G_KEY, TYPE, KIND, calc_calculate_rate, g_calculate_rate, g_t_calculate_rate, t_calculate_rate, pm_type
        ORDER BY TYPE, KIND, G_KEY
    </select>

</mapper>
